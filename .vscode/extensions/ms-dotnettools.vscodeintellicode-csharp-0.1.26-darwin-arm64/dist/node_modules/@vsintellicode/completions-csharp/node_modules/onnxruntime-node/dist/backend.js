"use strict";var _OnnxruntimeSessionHandler_inferenceSession,__classPrivateFieldSet=this&&this.__classPrivateFieldSet||function(e,n,i,s,t){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!t)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof n?e!==n||!t:!n.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?t.call(e,i):t?t.value=i:n.set(e,i),i},__classPrivateFieldGet=this&&this.__classPrivateFieldGet||function(e,n,i,s){if("a"===i&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof n?e!==n||!s:!n.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===i?s:"a"===i?s.call(e):s?s.value:n.get(e)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.onnxruntimeBackend=void 0;const binding_1=require("./binding");class OnnxruntimeSessionHandler{constructor(e,n){_OnnxruntimeSessionHandler_inferenceSession.set(this,void 0),__classPrivateFieldSet(this,_OnnxruntimeSessionHandler_inferenceSession,new binding_1.binding.InferenceSession,"f"),"string"==typeof e?__classPrivateFieldGet(this,_OnnxruntimeSessionHandler_inferenceSession,"f").loadModel(e,n):__classPrivateFieldGet(this,_OnnxruntimeSessionHandler_inferenceSession,"f").loadModel(e.buffer,e.byteOffset,e.byteLength,n),this.inputNames=__classPrivateFieldGet(this,_OnnxruntimeSessionHandler_inferenceSession,"f").inputNames,this.outputNames=__classPrivateFieldGet(this,_OnnxruntimeSessionHandler_inferenceSession,"f").outputNames}async dispose(){return Promise.resolve()}startProfiling(){}endProfiling(){}async run(e,n,i){return new Promise(((s,t)=>{process.nextTick((()=>{try{s(__classPrivateFieldGet(this,_OnnxruntimeSessionHandler_inferenceSession,"f").run(e,n,i))}catch(e){t(e)}}))}))}}_OnnxruntimeSessionHandler_inferenceSession=new WeakMap;class OnnxruntimeBackend{async init(){return Promise.resolve()}async createSessionHandler(e,n){return new Promise(((i,s)=>{process.nextTick((()=>{try{i(new OnnxruntimeSessionHandler(e,n||{}))}catch(e){s(e)}}))}))}}exports.onnxruntimeBackend=new OnnxruntimeBackend;