const backends={},backendsSortedByPriority=[];export const registerBackend=(e,i,r)=>{if(!i||"function"!=typeof i.init||"function"!=typeof i.createSessionHandler)throw new TypeError("not a valid backend");{const n=backends[e];if(void 0===n)backends[e]={backend:i,priority:r};else{if(n.priority>r)return;if(n.priority===r&&n.backend!==i)throw new Error(`cannot register backend "${e}" using priority ${r}`)}if(r>=0){const i=backendsSortedByPriority.indexOf(e);-1!==i&&backendsSortedByPriority.splice(i,1);for(let i=0;i<backendsSortedByPriority.length;i++)if(backends[backendsSortedByPriority[i]].priority<=r)return void backendsSortedByPriority.splice(i,0,e);backendsSortedByPriority.push(e)}}};export const resolveBackend=async e=>{const i=0===e.length?backendsSortedByPriority:e,r=[];for(const e of i){const i=backends[e];if(i){if(i.initialized)return i.backend;if(i.aborted)continue;const n=!!i.initPromise;try{return n||(i.initPromise=i.backend.init()),await i.initPromise,i.initialized=!0,i.backend}catch(t){n||r.push({name:e,err:t}),i.aborted=!0}finally{delete i.initPromise}}}throw new Error(`no available backend found. ERR: ${r.map((e=>`[${e.name}] ${e.err}`)).join(", ")}`)};