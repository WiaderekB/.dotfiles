"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var debugFactory=require("debug");function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var debugFactory__default=_interopDefaultLegacy(debugFactory);const debug=debugFactory__default.default("serialport/binding-mock");let ports={},serialNumber=0;function resolveNextTick(){return new Promise((e=>process.nextTick((()=>e()))))}class CanceledError extends Error{constructor(e){super(e),this.canceled=!0}}const MockBinding={reset(){ports={},serialNumber=0},createPort(e,t={}){serialNumber++;const r=Object.assign({echo:!1,record:!1,manufacturer:"The J5 Robotics Company",vendorId:void 0,productId:void 0,maxReadSize:1024},t);ports[e]={data:Buffer.alloc(0),echo:r.echo,record:r.record,readyData:r.readyData,maxReadSize:r.maxReadSize,info:{path:e,manufacturer:r.manufacturer,serialNumber:`${serialNumber}`,pnpId:void 0,locationId:void 0,vendorId:r.vendorId,productId:r.productId}},debug(serialNumber,"created port",JSON.stringify({path:e,opt:t}))},list:async()=>(debug(null,"list"),Object.values(ports).map((e=>e.info))),async open(e){var t;if(!e||"object"!=typeof e||Array.isArray(e))throw new TypeError('"options" is not an object');if(!e.path)throw new TypeError('"path" is not a valid port');if(!e.baudRate)throw new TypeError('"baudRate" is not a valid baudRate');const r=Object.assign({dataBits:8,lock:!0,stopBits:1,parity:"none",rtscts:!1,xon:!1,xoff:!1,xany:!1,hupcl:!0},e),{path:i}=r;debug(null,`open: opening path ${i}`);const o=ports[i];if(await resolveNextTick(),!o)throw new Error(`Port does not exist - please call MockBinding.createPort('${i}') first`);const s=o.info.serialNumber;if(null===(t=o.openOpt)||void 0===t?void 0:t.lock)throw debug(s,"open: Port is locked cannot open"),new Error("Port is locked cannot open");return debug(s,`open: opened path ${i}`),o.openOpt=Object.assign({},r),new MockPortBinding(o,r)}};class MockPortBinding{constructor(e,t){if(this.port=e,this.openOptions=t,this.pendingRead=null,this.isOpen=!0,this.lastWrite=null,this.recording=Buffer.alloc(0),this.writeOperation=null,this.serialNumber=e.info.serialNumber,e.readyData){const t=e.readyData;process.nextTick((()=>{this.isOpen&&(debug(this.serialNumber,"emitting ready data"),this.emitData(t))}))}}emitData(e){if(!this.isOpen||!this.port)throw new Error("Port must be open to pretend to receive data");const t=Buffer.isBuffer(e)?e:Buffer.from(e);debug(this.serialNumber,"emitting data - pending read:",Boolean(this.pendingRead)),this.port.data=Buffer.concat([this.port.data,t]),this.pendingRead&&(process.nextTick(this.pendingRead),this.pendingRead=null)}async close(){if(debug(this.serialNumber,"close"),!this.isOpen)throw new Error("Port is not open");const e=this.port;if(!e)throw new Error("already closed");e.openOpt=void 0,e.data=Buffer.alloc(0),debug(this.serialNumber,"port is closed"),this.serialNumber=void 0,this.isOpen=!1,this.pendingRead&&this.pendingRead(new CanceledError("port is closed"))}async read(e,t,r){if(!Buffer.isBuffer(e))throw new TypeError('"buffer" is not a Buffer');if("number"!=typeof t||isNaN(t))throw new TypeError(`"offset" is not an integer got "${isNaN(t)?"NaN":typeof t}"`);if("number"!=typeof r||isNaN(r))throw new TypeError(`"length" is not an integer got "${isNaN(r)?"NaN":typeof r}"`);if(e.length<t+r)throw new Error("buffer is too small");if(!this.isOpen)throw new Error("Port is not open");if(debug(this.serialNumber,"read",r,"bytes"),await resolveNextTick(),!this.isOpen||!this.port)throw new CanceledError("Read canceled");if(this.port.data.length<=0)return new Promise(((i,o)=>{this.pendingRead=s=>{if(s)return o(s);this.read(e,t,r).then(i,o)}}));const i=this.port.maxReadSize>r?r:this.port.maxReadSize,o=this.port.data.slice(0,i).copy(e,t);return this.port.data=this.port.data.slice(i),debug(this.serialNumber,"read",o,"bytes"),{bytesRead:o,buffer:e}}async write(e){if(!Buffer.isBuffer(e))throw new TypeError('"buffer" is not a Buffer');if(!this.isOpen||!this.port)throw debug("write","error port is not open"),new Error("Port is not open");if(debug(this.serialNumber,"write",e.length,"bytes"),this.writeOperation)throw new Error("Overlapping writes are not supported and should be queued by the serialport object");return this.writeOperation=(async()=>{if(await resolveNextTick(),!this.isOpen||!this.port)throw new Error("Write canceled");const t=this.lastWrite=Buffer.from(e);this.port.record&&(this.recording=Buffer.concat([this.recording,t])),this.port.echo&&process.nextTick((()=>{this.isOpen&&this.emitData(t)})),this.writeOperation=null,debug(this.serialNumber,"writing finished")})(),this.writeOperation}async update(e){if("object"!=typeof e)throw TypeError('"options" is not an object');if("number"!=typeof e.baudRate)throw new TypeError('"options.baudRate" is not a number');if(debug(this.serialNumber,"update"),!this.isOpen||!this.port)throw new Error("Port is not open");await resolveNextTick(),this.port.openOpt&&(this.port.openOpt.baudRate=e.baudRate)}async set(e){if("object"!=typeof e)throw new TypeError('"options" is not an object');if(debug(this.serialNumber,"set"),!this.isOpen)throw new Error("Port is not open");await resolveNextTick()}async get(){if(debug(this.serialNumber,"get"),!this.isOpen)throw new Error("Port is not open");return await resolveNextTick(),{cts:!0,dsr:!1,dcd:!1}}async getBaudRate(){var e;if(debug(this.serialNumber,"getBaudRate"),!this.isOpen||!this.port)throw new Error("Port is not open");if(await resolveNextTick(),!(null===(e=this.port.openOpt)||void 0===e?void 0:e.baudRate))throw new Error("Internal Error");return{baudRate:this.port.openOpt.baudRate}}async flush(){if(debug(this.serialNumber,"flush"),!this.isOpen||!this.port)throw new Error("Port is not open");await resolveNextTick(),this.port.data=Buffer.alloc(0)}async drain(){if(debug(this.serialNumber,"drain"),!this.isOpen)throw new Error("Port is not open");await this.writeOperation,await resolveNextTick()}}exports.CanceledError=CanceledError,exports.MockBinding=MockBinding,exports.MockPortBinding=MockPortBinding;
// SIG // Begin signature block
// SIG // MIIoTAYJKoZIhvcNAQcCoIIoPTCCKDkCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // YMWV7QwjddRm7d8Ablfngjz3muxs1ZA6++aG2MuOBPCg
// SIG // gg2aMIIGGDCCBACgAwIBAgITMwAAA4MUYnEL35umPQAA
// SIG // AAADgzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMDcxMzIzNDUzNloX
// SIG // DTI0MDkxNTIzNDUzNlowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAlZ6RXxi6ssQbUoLu
// SIG // wsUg8Lzx5c2UB0kc6aIwqPLgFQAHd8Fujs2eO7JzXVxA
// SIG // 1yizqWqcy/7OQ0BytzPoM0/Dos4MCCt8Vofm41J7qoJl
// SIG // I1vRt3RH0+n1edFpKi+XbOdDqqZBPjx/fBLFa4HL5UD3
// SIG // u8adFOmz/YuCgHsv8q5oyzgtiH9cRamcUEBldYeb1jzo
// SIG // giSktqGeOO6bBVCq0Y2pOCSEOpAqRHZWuRoZrBnR9Dxb
// SIG // +54fqFuM9OaHQAt025PPApw4G2yWSerss9TEOVJ7YJ9F
// SIG // 3QnkBGwbHIqREw+zUQtdEI9kAai6NiD8U9tS/3QufZz7
// SIG // DI2Pnw3pnwQOKRUOkwIDAQABo4IBgjCCAX4wHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFLbqIlKYyBFhlR+UbIclG3Vb31x0MFQGA1UdEQRN
// SIG // MEukSTBHMS0wKwYDVQQLEyRNaWNyb3NvZnQgSXJlbGFu
// SIG // ZCBPcGVyYXRpb25zIExpbWl0ZWQxFjAUBgNVBAUTDTIz
// SIG // MTUyMis1MDExNTcwHwYDVR0jBBgwFoAUSG5k5VAF04Kq
// SIG // Fzc3IrVtqMp1ApUwVAYDVR0fBE0wSzBJoEegRYZDaHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9jcmwv
// SIG // TWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNybDBh
// SIG // BggrBgEFBQcBAQRVMFMwUQYIKwYBBQUHMAKGRWh0dHA6
// SIG // Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2VydHMv
// SIG // TWljQ29kU2lnUENBMjAxMV8yMDExLTA3LTA4LmNydDAM
// SIG // BgNVHRMBAf8EAjAAMA0GCSqGSIb3DQEBCwUAA4ICAQCJ
// SIG // u41n3onudflWf5dguZipzkHZ0JlADjVYe784mJX5VJmr
// SIG // HvDbRbrhTzKYbcLbmx+rWTEZRhw5jw7QOL1+jNCMOAY6
// SIG // B0oP7JBaChHiAB5TpshNEQeN5k7jTr3cGtCUj1juXunt
// SIG // Q9Acop2puL6yuximi+NR3GMAYuW/DbxpQM+ber+NUEGH
// SIG // /HuQr19f+dbkCG+BtFoVXl+ojFbLNDHIletniochj1F5
// SIG // RpXdMXJSWVeJKKNbBuGa7ln+T1XpUMUNG+UEHKmU5W1Q
// SIG // W9HrKW6FWsYeQff6INGLQ9tFf3lvnvukVdJjljyvr/Om
// SIG // Qvl1aUlShMIxc1koeIbMkmqB3Q2ASKixX1wOnxh80FcN
// SIG // RtcfvlsSfMhQ9t8BTfaQlOHASTB4ru/9bKHTQsMN99iN
// SIG // j5FP9M/GC2LRLiAw2zAcakmpj8LIdzBu3pE+5ZXROaWF
// SIG // IGcglS35OoEbt1M06gQaTm/a2NSU5KBknAaJQgCR0ldX
// SIG // mTtwoFRWbcAX2hUzf9K2xShNjKZinJHvQPR3O/MU23yL
// SIG // hzwKPQIky08+hC8FJWgT8XGyAPr1J0f3rgj+zk84SB42
// SIG // 8Au95BCZDrrElk1cWp/P3KS32Q2fVUoTGE/vvv5avrc1
// SIG // +UQft1kjY4FTDUL8PwatVilcS755GJKVhjdFOGE7+H7I
// SIG // 6qUgCthUvGTHBguMTE49qjCCB3owggVioAMCAQICCmEO
// SIG // kNIAAAAAAAMwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBS
// SIG // b290IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDExMB4X
// SIG // DTExMDcwODIwNTkwOVoXDTI2MDcwODIxMDkwOVowfjEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9z
// SIG // b2Z0IENvZGUgU2lnbmluZyBQQ0EgMjAxMTCCAiIwDQYJ
// SIG // KoZIhvcNAQEBBQADggIPADCCAgoCggIBAKvw+nIQHC6t
// SIG // 2G6qghBNNLrytlghn0IbKmvpWlCquAY4GgRJun/DDB7d
// SIG // N2vGEtgL8DjCmQawyDnVARQxQtOJDXlkh36UYCRsr55J
// SIG // nOloXtLfm1OyCizDr9mpK656Ca/XllnKYBoF6WZ26DJS
// SIG // JhIv56sIUM+zRLdd2MQuA3WraPPLbfM6XKEW9Ea64Dhk
// SIG // rG5kNXimoGMPLdNAk/jj3gcN1Vx5pUkp5w2+oBN3vpQ9
// SIG // 7/vjK1oQH01WKKJ6cuASOrdJXtjt7UORg9l7snuGG9k+
// SIG // sYxd6IlPhBryoS9Z5JA7La4zWMW3Pv4y07MDPbGyr5I4
// SIG // ftKdgCz1TlaRITUlwzluZH9TupwPrRkjhMv0ugOGjfdf
// SIG // 8NBSv4yUh7zAIXQlXxgotswnKDglmDlKNs98sZKuHCOn
// SIG // qWbsYR9q4ShJnV+I4iVd0yFLPlLEtVc/JAPw0XpbL9Uj
// SIG // 43BdD1FGd7P4AOG8rAKCX9vAFbO9G9RVS+c5oQ/pI0m8
// SIG // GLhEfEXkwcNyeuBy5yTfv0aZxe/CHFfbg43sTUkwp6uO
// SIG // 3+xbn6/83bBm4sGXgXvt1u1L50kppxMopqd9Z4DmimJ4
// SIG // X7IvhNdXnFy/dygo8e1twyiPLI9AN0/B4YVEicQJTMXU
// SIG // pUMvdJX3bvh4IFgsE11glZo+TzOE2rCIF96eTvSWsLxG
// SIG // oGyY0uDWiIwLAgMBAAGjggHtMIIB6TAQBgkrBgEEAYI3
// SIG // FQEEAwIBADAdBgNVHQ4EFgQUSG5k5VAF04KqFzc3IrVt
// SIG // qMp1ApUwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEw
// SIG // CwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYD
// SIG // VR0jBBgwFoAUci06AjGQQ7kUBU7h6qfHMdEjiTQwWgYD
// SIG // VR0fBFMwUTBPoE2gS4ZJaHR0cDovL2NybC5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2Vy
// SIG // QXV0MjAxMV8yMDExXzAzXzIyLmNybDBeBggrBgEFBQcB
// SIG // AQRSMFAwTgYIKwYBBQUHMAKGQmh0dHA6Ly93d3cubWlj
// SIG // cm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0
// SIG // MjAxMV8yMDExXzAzXzIyLmNydDCBnwYDVR0gBIGXMIGU
// SIG // MIGRBgkrBgEEAYI3LgMwgYMwPwYIKwYBBQUHAgEWM2h0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvZG9j
// SIG // cy9wcmltYXJ5Y3BzLmh0bTBABggrBgEFBQcCAjA0HjIg
// SIG // HQBMAGUAZwBhAGwAXwBwAG8AbABpAGMAeQBfAHMAdABh
// SIG // AHQAZQBtAGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOC
// SIG // AgEAZ/KGpZjgVHkaLtPYdGcimwuWEeFjkplCln3SeQyQ
// SIG // wWVfLiw++MNy0W2D/r4/6ArKO79HqaPzadtjvyI1pZdd
// SIG // ZYSQfYtGUFXYDJJ80hpLHPM8QotS0LD9a+M+By4pm+Y9
// SIG // G6XUtR13lDni6WTJRD14eiPzE32mkHSDjfTLJgJGKsKK
// SIG // ELukqQUMm+1o+mgulaAqPyprWEljHwlpblqYluSD9MCP
// SIG // 80Yr3vw70L01724lruWvJ+3Q3fMOr5kol5hNDj0L8giJ
// SIG // 1h/DMhji8MUtzluetEk5CsYKwsatruWy2dsViFFFWDgy
// SIG // cScaf7H0J/jeLDogaZiyWYlobm+nt3TDQAUGpgEqKD6C
// SIG // PxNNZgvAs0314Y9/HG8VfUWnduVAKmWjw11SYobDHWM2
// SIG // l4bf2vP48hahmifhzaWX0O5dY0HjWwechz4GdwbRBrF1
// SIG // HxS+YWG18NzGGwS+30HHDiju3mUv7Jf2oVyW2ADWoUa9
// SIG // WfOXpQlLSBCZgB/QACnFsZulP0V3HjXG0qKin3p6IvpI
// SIG // lR+r+0cjgPWe+L9rt0uX4ut1eBrs6jeZeRhL/9azI2h1
// SIG // 5q/6/IvrC4DqaTuv/DDtBEyO3991bWORPdGdVk5Pv4BX
// SIG // IqF4ETIheu9BCrE/+6jMpF3BoYibV3FWTkhFwELJm3Zb
// SIG // CoBIa/15n8G9bW1qyVJzEw16UM0xghoKMIIaBgIBATCB
// SIG // lTB+MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9N
// SIG // aWNyb3NvZnQgQ29kZSBTaWduaW5nIFBDQSAyMDExAhMz
// SIG // AAADgxRicQvfm6Y9AAAAAAODMA0GCWCGSAFlAwQCAQUA
// SIG // oIGuMBkGCSqGSIb3DQEJAzEMBgorBgEEAYI3AgEEMBwG
// SIG // CisGAQQBgjcCAQsxDjAMBgorBgEEAYI3AgEVMC8GCSqG
// SIG // SIb3DQEJBDEiBCCu2f3h46HiXjMDWVtrUGNZ6iHtIPGz
// SIG // 1AwfywKc9On1LzBCBgorBgEEAYI3AgEMMTQwMqAUgBIA
// SIG // TQBpAGMAcgBvAHMAbwBmAHShGoAYaHR0cDovL3d3dy5t
// SIG // aWNyb3NvZnQuY29tMA0GCSqGSIb3DQEBAQUABIIBAHqJ
// SIG // 4x9uKJFYYYkVufHtwXSiMfo4fMV8kLaPAI8eXxLjsb2R
// SIG // TLMbSGKVbMAStj4KJL/F1ucgUbWnMK4MJdKtUPHyyetE
// SIG // 03qoOomqKtqBGRzFGjIpfBOaugDkHjWEU5911AMI6jFd
// SIG // UKJhNpSiNAUWZs470beLNcYMC11tBnRu44R+5TtHXpai
// SIG // pJOh7P52Ct+QmQENQJOBnMqHEQdE/hVtfrH98k6i3t3U
// SIG // 35BY0dspbtVlroegA5R/E+f/q7rmz0isGKkDUDI/DkfG
// SIG // cPFRLi7IUkvaLSJ6d9iK0U3uJO5DbU4pLtL/TgIt2L9a
// SIG // LpCiE4Ei+wz+d5j/L3arO/k+ZaH1EcWhgheUMIIXkAYK
// SIG // KwYBBAGCNwMDATGCF4Awghd8BgkqhkiG9w0BBwKgghdt
// SIG // MIIXaQIBAzEPMA0GCWCGSAFlAwQCAQUAMIIBUgYLKoZI
// SIG // hvcNAQkQAQSgggFBBIIBPTCCATkCAQEGCisGAQQBhFkK
// SIG // AwEwMTANBglghkgBZQMEAgEFAAQggiJAiRIL2cLeUDq2
// SIG // wt2IsXzfYppRZrCeY5DtE67DkCcCBmV7G7V+1hgTMjAy
// SIG // NDAxMDYwMjE5MTEuNzM2WjAEgAIB9KCB0aSBzjCByzEL
// SIG // MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24x
// SIG // EDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jv
// SIG // c29mdCBDb3Jwb3JhdGlvbjElMCMGA1UECxMcTWljcm9z
// SIG // b2Z0IEFtZXJpY2EgT3BlcmF0aW9uczEnMCUGA1UECxMe
// SIG // blNoaWVsZCBUU1MgRVNOOjk2MDAtMDVFMC1EOTQ3MSUw
// SIG // IwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2
// SIG // aWNloIIR6jCCByAwggUIoAMCAQICEzMAAAHY/EszpR3Y
// SIG // hRUAAQAAAdgwDQYJKoZIhvcNAQELBQAwfDELMAkGA1UE
// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp
// SIG // bWUtU3RhbXAgUENBIDIwMTAwHhcNMjMwNTI1MTkxMjQw
// SIG // WhcNMjQwMjAxMTkxMjQwWjCByzELMAkGA1UEBhMCVVMx
// SIG // EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1Jl
// SIG // ZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3Jh
// SIG // dGlvbjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJpY2Eg
// SIG // T3BlcmF0aW9uczEnMCUGA1UECxMeblNoaWVsZCBUU1Mg
// SIG // RVNOOjk2MDAtMDVFMC1EOTQ3MSUwIwYDVQQDExxNaWNy
// SIG // b3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNlMIICIjANBgkq
// SIG // hkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAzXjrKdH14AM+
// SIG // xlBdDfv9BB3EBa4usJYk25kDZhZvA4tAnkPJ+G3drXeb
// SIG // W7c07BJO3WNv55lmPZKhL2r23WEWzXPhLL/DX7+jDCJh
// SIG // /bQq+SsbNueDENI5qUbnK5t7h1uNtQn72tITUBCjdTUt
// SIG // K2ndVP2Tpnvlf0HknViqHwk4cX/37E3keNVm6lDQCTf5
// SIG // pd7Gzh/Gi4V8kxxu7Fbf1lEi6U9Hy5TV2BkV82rydalD
// SIG // nj88o/OoYiss0CS04yq+xqUxhckoiHDFv58iujSu0Y38
// SIG // taHy3Ub77RyHSb6Zj0s3twh/z2BVNtU6oSIWdfgEu0ZQ
// SIG // 6NfDEgxjx6UwlsKO5YLWNaWOkbzyILhd623bb4aMo5+Z
// SIG // j27OaYIxjvN6HQTT+yJSgI+AWx1F3h4rdw2toOwOI4nC
// SIG // qyzI6OrBnnrSaHiqKI+YjU12w8CyjPR5VHV2Us+tn7Qm
// SIG // VbivRQYJADvTETdqagZ6bQRn5ZZvttRS5OhN71VzBhwe
// SIG // XjoBXwMvOF5SInsnEAKyA7BJvdihyBThjoGZVsXuvZXl
// SIG // 7zB42CZaaNlVTLS8Fy3d7Y0v9e96LhjEWoiyJy5uKCIK
// SIG // g7Y1CKr8GEFId0TesMHRe+Zzpq6a/MEcNZ/wSlkOZoUM
// SIG // WjAaqr5G7rtbC3kjD79jzGSHXVz24jrwMWnaj5AXDD1A
// SIG // Zq8kmKC08cMCAwEAAaOCAUkwggFFMB0GA1UdDgQWBBT2
// SIG // 049MfD2QS2J9DGQSOpxoeaiJVjAfBgNVHSMEGDAWgBSf
// SIG // pxVdAF5iXYP05dJlpxtTNRnpcjBfBgNVHR8EWDBWMFSg
// SIG // UqBQhk5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtp
// SIG // b3BzL2NybC9NaWNyb3NvZnQlMjBUaW1lLVN0YW1wJTIw
// SIG // UENBJTIwMjAxMCgxKS5jcmwwbAYIKwYBBQUHAQEEYDBe
// SIG // MFwGCCsGAQUFBzAChlBodHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vcGtpb3BzL2NlcnRzL01pY3Jvc29mdCUyMFRp
// SIG // bWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNydDAMBgNV
// SIG // HRMBAf8EAjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMI
// SIG // MA4GA1UdDwEB/wQEAwIHgDANBgkqhkiG9w0BAQsFAAOC
// SIG // AgEArpwOmkj+PKCdVQ/kjBdf+0hYkxg+s8iwtybvR7S4
// SIG // 6mGKtRSVlMddCOV6lNGpXF01BVKFCFD0r33l/3V9DIKH
// SIG // 1BvnDl3aJGhx0paOj2SA151ApaZEYsfcQjd+8hQaXMBi
// SIG // 8xGZQyiW9oA6vxQRgvLJ05QUhDgY1dHhPCAlVJDicyAL
// SIG // bRMWnkFieUnq1K+t56ul+z5kL5NTixZdxSaFuPucyqq4
// SIG // mPzyhrLDmgOWYwWRMlPqO/j94nC/8GdBt8ppU/hGuIfX
// SIG // 96uWlXRlQXbIWGv0noRpp1LxjAPI+QrduIp8fm1Trhfx
// SIG // P9i4yKfphGq8uZjk6wDVSi8ptpFt3kMRfyPXI/O8Z3Ym
// SIG // B+eV361jJPW7EU6MTqUW/RKWwgeXEsijb8UPA9NKndk5
// SIG // 3VRCRaYMgR0CUv1xCuaaHiWeaoJghQI+FVDwf3T1x3U5
// SIG // tUFySN3Duw0cj1GQGDMENyoT5TNoT9jnwSSK/1bA7Id7
// SIG // Myy9mSbnq47IYcWBlW6DLnfWjaEY5c9THJ+IhKLWuLWp
// SIG // tuBcQ8h66hZuhFELv6Q2BA6rrr0BRm+YJSHJOKyqgZ0Z
// SIG // a0aIkY9KnYTt56KLVYP9Uj9M0ywtUa8Y7kxFXtzyqxE2
// SIG // 7b3Dg6Bofddl67X+MGzMKa2vI2LM8696X9PdOc8y/G/J
// SIG // /JLjAQoQWHxXbPdeik43OExjVPUwggdxMIIFWaADAgEC
// SIG // AhMzAAAAFcXna54Cm0mZAAAAAAAVMA0GCSqGSIb3DQEB
// SIG // CwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQD
// SIG // EylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRo
// SIG // b3JpdHkgMjAxMDAeFw0yMTA5MzAxODIyMjVaFw0zMDA5
// SIG // MzAxODMyMjVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKC
// SIG // AgEA5OGmTOe0ciELeaLL1yR5vQ7VgtP97pwHB9KpbE51
// SIG // yMo1V/YBf2xK4OK9uT4XYDP/XE/HZveVU3Fa4n5KWv64
// SIG // NmeFRiMMtY0Tz3cywBAY6GB9alKDRLemjkZrBxTzxXb1
// SIG // hlDcwUTIcVxRMTegCjhuje3XD9gmU3w5YQJ6xKr9cmmv
// SIG // Haus9ja+NSZk2pg7uhp7M62AW36MEBydUv626GIl3GoP
// SIG // z130/o5Tz9bshVZN7928jaTjkY+yOSxRnOlwaQ3KNi1w
// SIG // jjHINSi947SHJMPgyY9+tVSP3PoFVZhtaDuaRr3tpK56
// SIG // KTesy+uDRedGbsoy1cCGMFxPLOJiss254o2I5JasAUq7
// SIG // vnGpF1tnYN74kpEeHT39IM9zfUGaRnXNxF803RKJ1v2l
// SIG // IH1+/NmeRd+2ci/bfV+AutuqfjbsNkz2K26oElHovwUD
// SIG // o9Fzpk03dJQcNIIP8BDyt0cY7afomXw/TNuvXsLz1dhz
// SIG // PUNOwTM5TI4CvEJoLhDqhFFG4tG9ahhaYQFzymeiXtco
// SIG // dgLiMxhy16cg8ML6EgrXY28MyTZki1ugpoMhXV8wdJGU
// SIG // lNi5UPkLiWHzNgY1GIRH29wb0f2y1BzFa/ZcUlFdEtsl
// SIG // uq9QBXpsxREdcu+N+VLEhReTwDwV2xo3xwgVGD94q0W2
// SIG // 9R6HXtqPnhZyacaue7e3PmriLq0CAwEAAaOCAd0wggHZ
// SIG // MBIGCSsGAQQBgjcVAQQFAgMBAAEwIwYJKwYBBAGCNxUC
// SIG // BBYEFCqnUv5kxJq+gpE8RjUpzxD/LwTuMB0GA1UdDgQW
// SIG // BBSfpxVdAF5iXYP05dJlpxtTNRnpcjBcBgNVHSAEVTBT
// SIG // MFEGDCsGAQQBgjdMg30BATBBMD8GCCsGAQUFBwIBFjNo
// SIG // dHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL0Rv
// SIG // Y3MvUmVwb3NpdG9yeS5odG0wEwYDVR0lBAwwCgYIKwYB
// SIG // BQUHAwgwGQYJKwYBBAGCNxQCBAweCgBTAHUAYgBDAEEw
// SIG // CwYDVR0PBAQDAgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYD
// SIG // VR0jBBgwFoAU1fZWy4/oolxiaNE9lJBb186aGMQwVgYD
// SIG // VR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljUm9vQ2Vy
// SIG // QXV0XzIwMTAtMDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4w
// SIG // TDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAx
// SIG // MC0wNi0yMy5jcnQwDQYJKoZIhvcNAQELBQADggIBAJ1V
// SIG // ffwqreEsH2cBMSRb4Z5yS/ypb+pcFLY+TkdkeLEGk5c9
// SIG // MTO1OdfCcTY/2mRsfNB1OW27DzHkwo/7bNGhlBgi7ulm
// SIG // ZzpTTd2YurYeeNg2LpypglYAA7AFvonoaeC6Ce5732pv
// SIG // vinLbtg/SHUB2RjebYIM9W0jVOR4U3UkV7ndn/OOPcbz
// SIG // aN9l9qRWqveVtihVJ9AkvUCgvxm2EhIRXT0n4ECWOKz3
// SIG // +SmJw7wXsFSFQrP8DJ6LGYnn8AtqgcKBGUIZUnWKNsId
// SIG // w2FzLixre24/LAl4FOmRsqlb30mjdAy87JGA0j3mSj5m
// SIG // O0+7hvoyGtmW9I/2kQH2zsZ0/fZMcm8Qq3UwxTSwethQ
// SIG // /gpY3UA8x1RtnWN0SCyxTkctwRQEcb9k+SS+c23Kjgm9
// SIG // swFXSVRk2XPXfx5bRAGOWhmRaw2fpCjcZxkoJLo4S5pu
// SIG // +yFUa2pFEUep8beuyOiJXk+d0tBMdrVXVAmxaQFEfnyh
// SIG // YWxz/gq77EFmPWn9y8FBSX5+k77L+DvktxW/tM4+pTFR
// SIG // hLy/AsGConsXHRWJjXD+57XQKBqJC4822rpM+Zv/Cuk0
// SIG // +CQ1ZyvgDbjmjJnW4SLq8CdCPSWU5nR0W2rRnj7tfqAx
// SIG // M328y+l7vzhwRNGQ8cirOoo6CGJ/2XBjU02N7oJtpQUQ
// SIG // wXEGahC0HVUzWLOhcGbyoYIDTTCCAjUCAQEwgfmhgdGk
// SIG // gc4wgcsxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJTAjBgNVBAsT
// SIG // HE1pY3Jvc29mdCBBbWVyaWNhIE9wZXJhdGlvbnMxJzAl
// SIG // BgNVBAsTHm5TaGllbGQgVFNTIEVTTjo5NjAwLTA1RTAt
// SIG // RDk0NzElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3Rh
// SIG // bXAgU2VydmljZaIjCgEBMAcGBSsOAwIaAxUASKfvsVCf
// SIG // n/OVa5283ZETEqQZry+ggYMwgYCkfjB8MQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGlt
// SIG // ZS1TdGFtcCBQQ0EgMjAxMDANBgkqhkiG9w0BAQsFAAIF
// SIG // AOlCmfMwIhgPMjAyNDAxMDUxNTA4MzVaGA8yMDI0MDEw
// SIG // NjE1MDgzNVowdDA6BgorBgEEAYRZCgQBMSwwKjAKAgUA
// SIG // 6UKZ8wIBADAHAgEAAgIUTjAHAgEAAgITKzAKAgUA6UPr
// SIG // cwIBADA2BgorBgEEAYRZCgQCMSgwJjAMBgorBgEEAYRZ
// SIG // CgMCoAowCAIBAAIDB6EgoQowCAIBAAIDAYagMA0GCSqG
// SIG // SIb3DQEBCwUAA4IBAQBL7Ukwl3Aw83OefG4iF9lDdceU
// SIG // Coduv3sEXJxPFRmB68Y+mNGfACmzHolKAz/tTiym76Od
// SIG // 1l135RFnKnrYRTYIK4RiffWfagIry8zsLRKSeCE2L8XX
// SIG // /P9Tghh8S/lHeaxFXV5FUfbiAAY2jLdiKy1czTo5EPa3
// SIG // yc7g6uBnxxjm28TjBGRnw4g+MW5l6sco8N+TBNvxHZnj
// SIG // qXalskQma1Q/rEjfPZo0MmJjHkYh1RxQBOdqXz6/KtOd
// SIG // RkWplM/7DAPhmITIoe/4UU4zN0/g09+AJB8it3jqs+oc
// SIG // mq6C4BZmPzSXoBrA8eF/Wrtf32PGvmbmcxpRfU8jYywF
// SIG // 7zDvk+apMYIEDTCCBAkCAQEwgZMwfDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUt
// SIG // U3RhbXAgUENBIDIwMTACEzMAAAHY/EszpR3YhRUAAQAA
// SIG // AdgwDQYJYIZIAWUDBAIBBQCgggFKMBoGCSqGSIb3DQEJ
// SIG // AzENBgsqhkiG9w0BCRABBDAvBgkqhkiG9w0BCQQxIgQg
// SIG // WJsQI0icryIZI2lExAARPDahpHD1Io+m+0ot0QjH8Dsw
// SIG // gfoGCyqGSIb3DQEJEAIvMYHqMIHnMIHkMIG9BCA64yF/
// SIG // /AmTd0UwATDbebu9zIt6N35r6to/EopPtrO+VDCBmDCB
// SIG // gKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo
// SIG // aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK
// SIG // ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT
// SIG // HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwAhMz
// SIG // AAAB2PxLM6Ud2IUVAAEAAAHYMCIEIAVPfQHy3TivKklm
// SIG // NhYpJJFDEC2pK4aC46xVAT/N8EUYMA0GCSqGSIb3DQEB
// SIG // CwUABIICAJgoSe3Fqg3K5DeRZ9yVanKr3WLzaNYEO5DY
// SIG // OpLytjLhWTn4/GCBbZR7ZR6IDqNtywcyQlDuN2V909gL
// SIG // W2K3pimmYnDXSf+QSzrkAM9IN2M6pmQ415eaoowY1OaM
// SIG // 9cebA1BckV+5Ox8Z4Ni6hfzgG2/cZ+FoNIgRNdHzJ9in
// SIG // mPaz9BvAgNud2ECS4L3nJwVCxOsj51xrT9RomupUBpMX
// SIG // w6oRaBiQKFrrawcEFnORRF+UGZC3KM8f5d0hu1bocRNt
// SIG // S/bu3a7+h3e5yzuPtDREvs2VyPl51Rxbd/kU5Fl9pQnQ
// SIG // Es+HO2gAc/rlnmQZCSeu4eCQkDBpRp2+2KpQNP8+VtFF
// SIG // e0xZFytyXCdE95FlKDRKSRo0N+tc0G786IcDME0C5/vk
// SIG // dyv5LNUmrXGk07q9oIx21Lz6Pv8b8sKIk5BYWy5Yw/9K
// SIG // PNfEerm4D/qAcq4A83L+KbckGztXSBTkYlxdZhZM9IFH
// SIG // a6jjjj1UMoMWg47sjuw1ZmrMxOLF2pJ/PeOtI4w53WVn
// SIG // vX8VK9B+qeD7AFUdUQhD5VxBlj/h3vRwxNIJMP7EunDF
// SIG // VzMWMr9fWzWJ1V92NqYftLPuUb7+jcRkOhXnBlC3OBAq
// SIG // y1nd1pmT4cfbWvJ4M1W3k/MkbF1QJgFbOf1MOCMF9VST
// SIG // qPCjGmp1WniLurj97idnGaT58QrWWhid
// SIG // End signature block
